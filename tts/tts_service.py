"""
–°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –¥–≤–∏–∂–∫–æ–≤
"""

import logging
import sounddevice as sd
import numpy as np
import io
import soundfile as sf
from typing import Optional
from utils.config_loader import config

logger = logging.getLogger(__name__)

class TTSService:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å TTS"""
    
    def __init__(self):
        self.tts_engine = None
        self.enabled = config.get('tts.enabled', True)
        self.engine_type = config.get('tts.engine', 'silero')
        self.voice = config.get('tts.voice', 'baya')
        self.device = config.get('tts.device', 'cuda')
        
        # Callbacks
        self.on_start_callback = None
        self.on_finish_callback = None
        
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS –¥–≤–∏–∂–∫–∞"""
        try:
            if not self.enabled:
                logger.info("TTS –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return
            
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS: {self.engine_type}")
            
            # –í—ã–±–æ—Ä –¥–≤–∏–∂–∫–∞
            if self.engine_type == 'silero':
                from tts.silero_tts import SileroTTS
                self.tts_engine = SileroTTS(device=self.device, voice=self.voice)
            elif self.engine_type == 'piper':
                from tts.piper_tts import PiperTTS
                self.tts_engine = PiperTTS(voice=self.voice)
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π TTS –¥–≤–∏–∂–æ–∫: {self.engine_type}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            self.tts_engine.initialize()
            logger.info(f"‚úÖ TTS –≥–æ—Ç–æ–≤ ({self.engine_type})")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {e}", exc_info=True)
            self.enabled = False
            raise
    
    def speak(self, text: str):
        """
        –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
        """
        try:
            if not self.enabled or not self.tts_engine:
                logger.warning("TTS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # Callback –Ω–∞—á–∞–ª–∞
            if self.on_start_callback:
                try:
                    self.on_start_callback(text)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ on_start_callback: {e}")
            
            logger.info(f"üîä –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ: '{text[:50]}...'")
            
            # –°–∏–Ω—Ç–µ–∑
            audio_bytes = self.tts_engine.synthesize(text)
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            self._play_audio(audio_bytes)
            
            # Callback –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if self.on_finish_callback:
                try:
                    self.on_finish_callback()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ on_finish_callback: {e}")
            
            logger.info("‚úÖ –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}", exc_info=True)
    
    def _play_audio(self, audio_bytes: bytes):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ"""
        try:
            # –ß—Ç–µ–Ω–∏–µ WAV –∏–∑ bytes
            audio_data, sample_rate = sf.read(io.BytesIO(audio_bytes))
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            sd.play(audio_data, sample_rate)
            sd.wait()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}", exc_info=True)
            raise
    
    def get_available_voices(self) -> list[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞"""
        if self.tts_engine:
            return self.tts_engine.get_available_voices()
        return []
    
    def set_voice(self, voice_name: str):
        """–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å"""
        try:
            if self.tts_engine:
                self.tts_engine.set_voice(voice_name)
                self.voice = voice_name
                logger.info(f"–ì–æ–ª–æ—Å –∏–∑–º–µ–Ω–µ–Ω: {voice_name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –≥–æ–ª–æ—Å–∞: {e}")
    
    def set_callbacks(self, on_start=None, on_finish=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callbacks"""
        self.on_start_callback = on_start
        self.on_finish_callback = on_finish
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞"""
        try:
            if self.tts_engine:
                self.tts_engine.cleanup()
                self.tts_engine = None
            logger.info("‚úì TTS –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ TTS: {e}")
