"""
–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å Gemini API
"""

import logging
import requests
from typing import Optional
from utils.config_loader import config
from utils.database import ConversationDatabase

logger = logging.getLogger(__name__)

class GeminiService:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è Gemini API"""
    
    def __init__(self):
        self.api_key = config.get('gemini.api_key')
        self.model = config.get('gemini.model', 'gemini-2.0-flash-exp')
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.temperature = config.get('gemini.temperature', 0.7)
        self.max_tokens = config.get('gemini.max_output_tokens', 200)
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        self.db = ConversationDatabase()
        self.current_session_id = None
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
        self.conversation_history = []
        
        # –ü—Ä–æ–∫—Å–∏
        self.proxies = None
        if config.get('gemini.proxy.enabled', False):
            proxy_type = config.get('gemini.proxy.type', 'socks5')
            proxy_host = config.get('gemini.proxy.host')
            proxy_port = config.get('gemini.proxy.port')
            
            proxy_url = f"{proxy_type}://{proxy_host}:{proxy_port}"
            self.proxies = {
                'http': proxy_url,
                'https': proxy_url
            }
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: {proxy_url}")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        self.system_prompt = """–¢—ã –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. 
–û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É - 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. 
–ë–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤. –ü—Ä—è–º–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å.
–ó–∞–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –æ—Ç–≤–µ—á–∞–π —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        
        # Callbacks
        self.response_callback = None
        self.error_callback = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        self._init_session()
    
    def _init_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏"""
        last_session = self.db.get_latest_session()
        
        if last_session:
            self.current_session_id = last_session
            self.conversation_history = self.db.load_session_history(last_session)
            msg_count = len(self.conversation_history)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ—Å—Å–∏—è {last_session} —Å {msg_count} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
        else:
            self.current_session_id = self.db.create_session()
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è {self.current_session_id}")
    
    def send_query(self, user_message: str) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ Gemini —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            url = f"{self.base_url}/{self.model}:generateContent?key={self.api_key}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º contents —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
            contents = []
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è
            if not self.conversation_history:
                contents.append({
                    "role": "user",
                    "parts": [{"text": self.system_prompt}]
                })
                contents.append({
                    "role": "model",
                    "parts": [{"text": "–ü–æ–Ω—è–ª, –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."}]
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            for msg in self.conversation_history:
                contents.append(msg)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            contents.append({
                "role": "user",
                "parts": [{"text": user_message}]
            })
            
            payload = {
                "contents": contents,
                "generationConfig": {
                    "temperature": self.temperature,
                    "topP": 0.95,
                    "topK": 40,
                    "maxOutputTokens": self.max_tokens
                }
            }
            
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ Gemini: {user_message} (–∏—Å—Ç–æ—Ä–∏—è: {len(self.conversation_history)//2} —Å–æ–æ–±—â–µ–Ω–∏–π)")
            
            response = requests.post(
                url,
                json=payload,
                proxies=self.proxies,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                if 'candidates' in data and len(data['candidates']) > 0:
                    text = data['candidates'][0]['content']['parts'][0]['text']
                    logger.info(f"–û—Ç–≤–µ—Ç Gemini: {text}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    self.db.save_message(self.current_session_id, "user", user_message)
                    self.db.save_message(self.current_session_id, "model", text)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
                    self.conversation_history.append({
                        "role": "user",
                        "parts": [{"text": user_message}]
                    })
                    self.conversation_history.append({
                        "role": "model",
                        "parts": [{"text": text}]
                    })
                    
                    if self.response_callback:
                        self.response_callback(text)
                    
                    return text
                else:
                    error = "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini"
                    logger.error(error)
                    if self.error_callback:
                        self.error_callback(error)
                    return None
            else:
                error = f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
                logger.error(error)
                if self.error_callback:
                    self.error_callback(error)
                return None

        except requests.exceptions.ProxyError:
            error = "üîí –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—É.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤ config/settings.yaml"
            logger.error(error)
            if self.error_callback:
                self.error_callback(error)
            return None
        except requests.exceptions.ConnectionError:
            error = "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É!\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏\n‚Ä¢ Firewall"
            logger.error(error)
            if self.error_callback:
                self.error_callback(error)
            return None

        except requests.exceptions.Timeout:
            error = "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
            logger.error(error)
            if self.error_callback:
                self.error_callback(error)
            return None

        except Exception as e:
            error = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            logger.error(error)
            if self.error_callback:
                self.error_callback(error)
            return None

    def clear_history(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é"""
        self.current_session_id = self.db.create_session()
        self.conversation_history.clear()
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è {self.current_session_id}")

    def get_history_length(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return len(self.conversation_history) // 2

    def set_response_callback(self, callback):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
        self.response_callback = callback

    def set_error_callback(self, callback):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è –æ—à–∏–±–∫–∏"""
        self.error_callback = callback
    
    def __del__(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ë–î –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        if hasattr(self, 'db'):
            self.db.close()