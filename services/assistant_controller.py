"""
–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ - –≤—Å—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
–ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ UI
"""

import logging
import threading
from typing import Optional, Callable, Dict
from enum import Enum

from utils.config_loader import config
from services.audio_capture import AudioCaptureService
from services.wake_word import WakeWordService
from services.speech_recognition import SpeechRecognitionService
from services.llm_service import GeminiService

logger = logging.getLogger(__name__)

class AssistantState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    STOPPED = "stopped"
    INITIALIZING = "initializing"
    LISTENING_WAKE_WORD = "listening_wake_word"
    RECORDING_COMMAND = "recording_command"
    PROCESSING_LLM = "processing_llm"
    ERROR = "error"

class VoiceAssistantController:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∏—Ö —Ä–∞–±–æ—Ç—É
    """
    
    def __init__(self):
        # –°–µ—Ä–≤–∏—Å—ã
        self.audio_service = AudioCaptureService()
        self.wake_word_service = WakeWordService()
        self.speech_service = SpeechRecognitionService()
        self.gemini_service = GeminiService()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state = AssistantState.STOPPED
        self.selected_device_index = None
        self.wake_word = config.get('wake_word.keyword', '–ø—Ä–∏–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç')
        self.sensitivity = config.get('speech_recognition.sensitivity', 5)
        
        # Callbacks –¥–ª—è UI –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.callbacks = {
            'on_state_changed': None,
            'on_status_update': None,
            'on_audio_level': None,
            'on_wake_word_detected': None,
            'on_speech_recognized': None,
            'on_llm_response': None,
            'on_llm_error': None,
            'on_error': None,
            'on_log': None,
            'on_noise_floor_calibrated': None,
            'on_history_updated': None,
            'on_threshold_updated': None,
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–ª–ª–±—ç–∫–æ–≤
        self._setup_service_callbacks()

        logger.info("‚úì VoiceAssistantController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _setup_service_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ callbacks –æ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤"""
        # Wake Word
        self.wake_word_service.set_wake_word_callback(self._on_wake_word_detected)
        self.wake_word_service.set_audio_level_callback(self._on_audio_level_wake)

        # Speech Recognition
        self.speech_service.set_speech_recognized_callback(self._on_speech_recognized)
        self.speech_service.set_audio_level_callback(self._on_audio_level_speech)
        self.speech_service.set_noise_floor_callback(self._on_noise_floor_calibrated)

        # Gemini
        self.gemini_service.set_response_callback(self._on_llm_response)
        self.gemini_service.set_error_callback(self._on_llm_error)

    def set_callback(self, event: str, callback: Callable):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        if event in self.callbacks:
            self.callbacks[event] = callback
            logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω callback –¥–ª—è '{event}'")
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: '{event}'")

    def _emit(self, event: str, *args, **kwargs):
        """–í—ã–∑–≤–∞—Ç—å callback –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
        try:
            if self.callbacks.get(event):
                self.callbacks[event](*args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback '{event}': {e}", exc_info=True)

    def _set_state(self, new_state: AssistantState):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        old_state = self.state
        self.state = new_state
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {old_state.value} -> {new_state.value}")
        self._emit('on_state_changed', new_state)

    def _log(self, message: str):
        """–í—ã–≤–µ—Å—Ç–∏ –ª–æ–≥"""
        logger.info(message)
        self._emit('on_log', message)

    def get_audio_devices(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            return self.audio_service.get_audio_devices()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}", exc_info=True)
            return []

    def start(self, device_index: int, wake_word: Optional[str] = None):
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç

        Args:
            device_index: –ò–Ω–¥–µ–∫—Å –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            wake_word: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if self.state != AssistantState.STOPPED:
            logger.warning("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False

        try:
            self._set_state(AssistantState.INITIALIZING)
            self.selected_device_index = device_index

            if wake_word:
                self.wake_word = wake_word

            # –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            init_thread = threading.Thread(
                target=self._initialize_services,
                daemon=True
            )
            init_thread.start()

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
            self._set_state(AssistantState.ERROR)
            self._emit('on_error', f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
            return False

    def _initialize_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""
        try:
            # Vosk
            self._emit('on_status_update', "–ó–∞–≥—Ä—É–∑–∫–∞ Vosk...", "orange")
            self.wake_word_service.initialize(self.wake_word)
            logger.info("‚úì Vosk –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # Whisper
            model_name = config.get('speech_recognition.model_name', 'large-v3')
            self._emit('on_status_update', f"–ó–∞–≥—Ä—É–∑–∫–∞ Whisper {model_name}...", "orange")
            self.speech_service.initialize()
            self.speech_service.update_sensitivity(self.sensitivity)
            logger.info("‚úì Whisper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ
            self.audio_service.start_capture(
                self.selected_device_index,
                self._on_audio_data
            )
            logger.info("‚úì –ó–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ –∑–∞–ø—É—â–µ–Ω")

            # –ì–æ—Ç–æ–≤–æ
            self._set_state(AssistantState.LISTENING_WAKE_WORD)
            self._emit('on_status_update', f"–°–ª—É—à–∞—é... –°–∫–∞–∂–∏—Ç–µ '{self.wake_word}'", "green")
            self._log(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ! –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{self.wake_word}'")

            # –ê–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
            if config.get('speech_recognition.auto_calibrate', True):
                threading.Timer(2.0, self.calibrate_noise_floor).start()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
            self._set_state(AssistantState.ERROR)
            self._emit('on_error', f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            self.stop()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"""
        try:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            self.audio_service.stop_capture()
            self.speech_service.stop()
            self.wake_word_service.stop()

            self._set_state(AssistantState.STOPPED)
            self._emit('on_status_update', "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "gray")
            self._log("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            logger.info("‚úì –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}", exc_info=True)

    def calibrate_noise_floor(self, duration: float = 2.0):
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º–∞"""
        if self.state not in [AssistantState.LISTENING_WAKE_WORD]:
            logger.warning("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è")
            return

        try:
            self._log(f"üîß –ö–ê–õ–ò–ë–†–û–í–ö–ê: –∑–∞–º–æ–ª—á–∏—Ç–µ –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")
            self._emit('on_status_update', "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞... –ù–µ –≥–æ–≤–æ—Ä–∏—Ç–µ!", "orange")

            def run_calibration():
                try:
                    self.speech_service.calibrate_noise_floor(duration)
                    self._emit('on_status_update', f"–°–ª—É—à–∞—é... –°–∫–∞–∂–∏—Ç–µ '{self.wake_word}'", "green")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}", exc_info=True)

            threading.Thread(target=run_calibration, daemon=True).start()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}", exc_info=True)

    def update_sensitivity(self, level: int):
        """–û–±–Ω–æ–≤–∏—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (1-10) - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—Ç–∞–π–º"""
        try:
            self.sensitivity = level
            self.speech_service.update_sensitivity(level)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            new_threshold = self.speech_service.get_voice_threshold()
            self._emit('on_threshold_updated', new_threshold)

            logger.info(f"‚úì –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {level}/10, –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥: {new_threshold:.4f}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}", exc_info=True)

    def reset_context(self):
        """–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ LLM"""
        try:
            old_count = self.gemini_service.get_history_length()
            self.gemini_service.clear_history()
            new_count = self.gemini_service.get_history_length()

            self._log(f"–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ (—Å—Ç–∞—Ä–∞—è —Å {old_count} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞)")
            self._emit('on_history_updated', new_count)

            logger.info(f"‚úì –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω: {old_count} -> {new_count}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)

    def get_history_length(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            return self.gemini_service.get_history_length()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}", exc_info=True)
            return 0

    def _on_audio_data(self, audio_data: bytes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ï—Å–ª–∏ –∏–¥–µ—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ - –¥–∞–Ω–Ω—ã–µ –∏–¥—É—Ç –≤ speech_service
            if self.speech_service.is_calibrating:
                self.speech_service.process_audio(audio_data)
            elif self.state == AssistantState.LISTENING_WAKE_WORD:
                self.wake_word_service.process_audio(audio_data)
            elif self.state == AssistantState.RECORDING_COMMAND:
                self.speech_service.process_audio(audio_data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}", exc_info=True)

    def _on_wake_word_detected(self):
        """Wake Word –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"""
        try:
            self._set_state(AssistantState.RECORDING_COMMAND)
            self._emit('on_status_update', "üé§ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! –°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É...", "blue")
            self._log("üîë WAKE WORD –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Whisper")
            self._emit('on_wake_word_detected')

            self.speech_service.start_recording()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ wake word: {e}", exc_info=True)
            self._set_state(AssistantState.LISTENING_WAKE_WORD)

    def _on_speech_recognized(self, text: str):
        """–†–µ—á—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞"""
        try:
            if text not in ["[—Ç–∏—à–∏–Ω–∞]", "[–æ—à–∏–±–∫–∞]"]:
                from datetime import datetime
                timestamp = datetime.now().strftime("%H:%M:%S")
                self._log(f"[{timestamp}] üí¨ {text}")
                self._emit('on_speech_recognized', text)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ LLM
                self._send_to_llm(text)

            # –í–æ–∑–≤—Ä–∞—Ç –∫ –æ–∂–∏–¥–∞–Ω–∏—é wake word
            self._set_state(AssistantState.LISTENING_WAKE_WORD)
            self._emit('on_status_update', f"–°–ª—É—à–∞—é... –°–∫–∞–∂–∏—Ç–µ '{self.wake_word}'", "green")
            self.wake_word_service.stop()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä–µ—á–∏: {e}", exc_info=True)
            self._set_state(AssistantState.LISTENING_WAKE_WORD)

    def _on_audio_level_wake(self, rms: float, status: str):
        """–£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞ –æ—Ç Wake Word"""
        if self.state == AssistantState.LISTENING_WAKE_WORD:
            self._emit('on_audio_level', rms, status)

    def _on_audio_level_speech(self, rms: float, status: str):
        """–£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞ –æ—Ç Speech Recognition"""
        if self.state == AssistantState.RECORDING_COMMAND:
            self._emit('on_audio_level', rms, status)

    def _on_noise_floor_calibrated(self, noise_floor: float):
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"""
        try:
            self._log(f"‚úÖ –ö–ê–õ–ò–ë–†–û–í–ö–ê: —Ñ–æ–Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å = {noise_floor:.4f}")
            self._emit('on_noise_floor_calibrated', noise_floor)

            # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥
            new_threshold = self.speech_service.get_voice_threshold()
            self._emit('on_threshold_updated', new_threshold)
            self._log(f"‚úÖ –ù–æ–≤—ã–π –ø–æ—Ä–æ–≥ –≥–æ–ª–æ—Å–∞: {new_threshold:.4f}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}", exc_info=True)

    def _send_to_llm(self, query: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ LLM"""
        try:
            self._set_state(AssistantState.PROCESSING_LLM)
            self._log(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Gemini: {query}")
            self._emit('on_status_update', "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...", "orange")

            def process():
                try:
                    self.gemini_service.send_query(query)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM: {e}", exc_info=True)
                    self._on_llm_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

            threading.Thread(target=process, daemon=True).start()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LLM: {e}", exc_info=True)
            self._set_state(AssistantState.LISTENING_WAKE_WORD)

    def _on_llm_response(self, response: str):
        """–û—Ç–≤–µ—Ç –æ—Ç LLM"""
        try:
            self._log(f"üì• –û—Ç–≤–µ—Ç Gemini: {response}")
            self._emit('on_llm_response', response)

            history_count = self.gemini_service.get_history_length()
            self._emit('on_history_updated', history_count)

            self._set_state(AssistantState.LISTENING_WAKE_WORD)
            self._emit('on_status_update', f"–°–ª—É—à–∞—é... –°–∫–∞–∂–∏—Ç–µ '{self.wake_word}'", "green")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ LLM: {e}", exc_info=True)

    def _on_llm_error(self, error: str):
        """–û—à–∏–±–∫–∞ LLM"""
        try:
            self._log(f"‚ùå –û—à–∏–±–∫–∞ Gemini: {error}")
            self._emit('on_llm_error', error)

            self._set_state(AssistantState.LISTENING_WAKE_WORD)
            self._emit('on_status_update', "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", "red")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ LLM: {e}", exc_info=True)